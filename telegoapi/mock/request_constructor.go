// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mymmrac/telego/telegoapi (interfaces: RequestConstructor)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	telegoapi "github.com/mymmrac/telego/telegoapi"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestConstructor is a mock of RequestConstructor interface.
type MockRequestConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockRequestConstructorMockRecorder
}

// MockRequestConstructorMockRecorder is the mock recorder for MockRequestConstructor.
type MockRequestConstructorMockRecorder struct {
	mock *MockRequestConstructor
}

// NewMockRequestConstructor creates a new mock instance.
func NewMockRequestConstructor(ctrl *gomock.Controller) *MockRequestConstructor {
	mock := &MockRequestConstructor{ctrl: ctrl}
	mock.recorder = &MockRequestConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestConstructor) EXPECT() *MockRequestConstructorMockRecorder {
	return m.recorder
}

// JSONRequest mocks base method.
func (m *MockRequestConstructor) JSONRequest(arg0 interface{}) (*telegoapi.RequestData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONRequest", arg0)
	ret0, _ := ret[0].(*telegoapi.RequestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONRequest indicates an expected call of JSONRequest.
func (mr *MockRequestConstructorMockRecorder) JSONRequest(arg0 interface{}) *RequestConstructorJSONRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONRequest", reflect.TypeOf((*MockRequestConstructor)(nil).JSONRequest), arg0)
	return &RequestConstructorJSONRequestCall{Call: call}
}

// RequestConstructorJSONRequestCall wrap *gomock.Call
type RequestConstructorJSONRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RequestConstructorJSONRequestCall) Return(arg0 *telegoapi.RequestData, arg1 error) *RequestConstructorJSONRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RequestConstructorJSONRequestCall) Do(f func(interface{}) (*telegoapi.RequestData, error)) *RequestConstructorJSONRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RequestConstructorJSONRequestCall) DoAndReturn(f func(interface{}) (*telegoapi.RequestData, error)) *RequestConstructorJSONRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MultipartRequest mocks base method.
func (m *MockRequestConstructor) MultipartRequest(arg0 map[string]string, arg1 map[string]telegoapi.NamedReader) (*telegoapi.RequestData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartRequest", arg0, arg1)
	ret0, _ := ret[0].(*telegoapi.RequestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartRequest indicates an expected call of MultipartRequest.
func (mr *MockRequestConstructorMockRecorder) MultipartRequest(arg0, arg1 interface{}) *RequestConstructorMultipartRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartRequest", reflect.TypeOf((*MockRequestConstructor)(nil).MultipartRequest), arg0, arg1)
	return &RequestConstructorMultipartRequestCall{Call: call}
}

// RequestConstructorMultipartRequestCall wrap *gomock.Call
type RequestConstructorMultipartRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RequestConstructorMultipartRequestCall) Return(arg0 *telegoapi.RequestData, arg1 error) *RequestConstructorMultipartRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RequestConstructorMultipartRequestCall) Do(f func(map[string]string, map[string]telegoapi.NamedReader) (*telegoapi.RequestData, error)) *RequestConstructorMultipartRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RequestConstructorMultipartRequestCall) DoAndReturn(f func(map[string]string, map[string]telegoapi.NamedReader) (*telegoapi.RequestData, error)) *RequestConstructorMultipartRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
